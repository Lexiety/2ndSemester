#include <iostream>
#include <string>

using namespace std;

int collis = 0;

struct human
{
	string fullname = "Null";
	string date = "Null";
	string adress = "Null";

};

struct hash_table
{
	human* arr;
	hash_table(int size)
	{
		arr = new human[size];
	}
	void add(human tmp, int size);
	void findIndex(string adress, int size);
};

string name[100] = { "Руслан", "Алексей", "Пол", "Артем", "Егор", "Александр", "Дмитрий", "Максим", "Сергей", "Андрей", "Илья", "Кирилл", "Михаил", "Матвей", "Роман", "Иван", "Ильяс", "Арсенний", "Денис", "Евгений", "Даниил", "Тимофей", "Владислав", "Павел", "Марк", "Константин", "Тимур", "Олег", "Ярослав", "Антон", "Николай", "Глеб", "Данил", "Савелий", "Вадим", "Степан", "Юрий", "Богдан", "Артур", "Семен", "Макар", "Лев", "Виктор", "Елисей", "Виталий", "Вячеслав", "Захар", "Мирон", "Дамир", "Георгий", "Давид", "Платон", "Анатолий", "Григорий", "Демид", "Данила", "Станислав", "Василий", "Федор", "Родион" , "Леонид", "Одиссей", "Валерий", "Святослав", "Борис", "Эдуард", "Марат", "Герман", "Даниэль", "Петр", "Амир", "Всеволод", "Мирослав", "Гордей", "Артемий", "Эмиль", "Назар", "Савва", "Ян", "Рустам", "Ингат", "Влад", "Альберт", "Тамерлан", "Айдар", "Роберт", "Марсель", "Ильдар", "Самир", "Тихон" , "Рамиль", "Ринат", "Радмир", "Филипп", "Арсен", "Ростислав", "Святогор", "Яромир", "Алдуин", "Пастернак" };
string postname[100] = { "Ланнистер", "Баратеон", "Талли", "Аррены", "Грейджой", "Бронн", "Мартелл", "Атрейдес", "Харконнен", "Гильдеец", "Смирнов", "Иванов", "Кузнецов", "Соколов", "Попов", "Лебедев", "Козлов", "Новиков", "Морозов", "Петров", "Волков", "Соловьев", "Васильев", "Зайцев", "Павлов", "Семенов", "Голубев", "Виноградов", "Богданов", "Влолбев", "Федоров", "Михайлов", "Беляев", "Тарасов", "Белов", "Комаров", "Тарасов", "Белов", "Комаров", "Орлов", "Киселев", "Андреев", "Макаров", "Гладиатор", "Ильин", "Лазарев", "Медведев", "Ершов", "Никитин", "Соболев", "Рябов", "Поляков", "Цветков", "Данилов", "Жуков", "Фролов", "Журавльев", "Драконорожденный", "Егоров", "Петухов" , "Тимофеев", "Власов", "Калорв", "Лапин", "Сазонов", "Гордеев", "Уваров", "Брагин", "Якушев", "Зыков", "Шарапов", "Рожков", "Самоснов", "Лихачев", "Щукин", "Шаров", "Сафонов", "Птеродактель", "Устинов", "Исаев", "Капустин", "Кириллов", "Рогов", "Князев", "Кулагин", "Логинов", "Савин", "Туров", "Блинов", "Королев" , "Пестов", "Меркушев", "Гущин", "Буров", "Галкин", "Коновалов", "Громов", "Мельников", "Давыдов", "Русаков" };
string patr[100] = { "Витальев", "Иванов", "Сергеев", "Владимиров", "Алексеев", "Мизаров", "Степанов", "Каладиев", "Булатович", "Лексеевич", "Джиравоич", "Лопарович", "Хорашивич", "Шолораович", "Корупович", "Щокурепич", "Защеливич", "Степонвич", "Жиданович", "Жолкавович", "Долгичвич", "Зоглаоррвич", "Ларенвич", "Апотьлиавич", "Логравич", "Хологрвич", "Хорекунивич", "Экуравоич", "Федорович", "Болкивич", "Ждаровкич", "Шорокывич", "Героувич", "Носорович", "Гордунвич", "Цекрович", "Шитохович", "Дорекфич", "Жирович", "Эколович", "Кардинович", "Можетвич", "Твичевич", "Ютубович", "Тровович", "Дискордович", "Скапович", "Вкович", "Карандошович", "Стрелкович", "Усталович", "Щеголович", "Викингович", "Ероваич", "Евроводич", "Бытович", "Жетович", "Цукович", "Парович", "Мирович" , "Часович", "Владимриович", "Оакович", "Лапович", "Ушович", "Хокунович", "Шоуканович", "Скорпирович", "Вальгалович", "Асасинович", "Котович", "Лопухович", "Автомобиволич", "Ипотивович", "Сахарович", "Можетович", "Хорошкович", "Началович", "Жароквоич", "Нулевич", "Можектович", "Ктокович", "Собакович", "Радорович", "Флешович", "Хартович", "Резонович", "Сезонович", "Ансерович" , "Коверович", "Пикович", "Глазович", "Асович", "Легионвич", "Шадоувич", "Энович", "Пиполович", "Медневич", "Концович" };
string adress[10] = { "88005553535", "88015553535", "88055553535", "88005853535", "88007553535", "88005593535", "88001553535", "81005553535", "88105553535", "88005553536" };
string day[31] = { "01","02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" };
string month[12] = { "01","02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
string year[18] = { "1993","1994","1995","1996","1997","1998", "1999", "2000", "2001", "2002", "2003", "2010", "2004", "2005", "2006", "2007", "2008", "2009" };


string rand_name()
{
	return (postname[rand() % 100] + " " + name[rand() % 100] + " " + patr[rand() % 100]);
}
string rand_adress()
{
	return (adress[rand() % 10]);
}
string rand_date()
{
	return (day[rand() % 31] + "." + month[rand() % 12] + "." + year[rand() % 18]);
}

human create_human()
{
	human tmp;
	tmp.fullname = rand_name();
	tmp.adress = rand_adress();
	tmp.date = rand_date();
	return tmp;
}

void fill_human(human* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		arr[i] = create_human();
	}
}

void show(const human tmp)
{
	cout << "Full name:          " << tmp.fullname
		<< "\nDate of birth:        " << tmp.date 
		<< "\nPhone number:  " << tmp.adress << endl << endl;
}

void showTable(hash_table* table, int size)
{
	for (int i = 0; i < size; i++)
	{
		show(table->arr[i]);
	}
}

void print_human(human* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		show(arr[i]);
	}
}

int hash_f(string str, int size)
{	
	int sum2 = 0;
	double n;
	for (int i = 0; i < str.size(); i++) { sum2 = sum2 + (str[i]-48); }
	double a = modf(0.68 * sum2, &n);
	double a1 = size * a;
	return (int)(a1);
}


void hash_table::add(human tmp, int size)
{
	int index = hash_f(tmp.adress, size);
	int hash = index;
	if (arr[index].adress == "Null")
	{
		arr[index] = tmp;
		return;
	}
	else
	{
		while (index < size)
		{
			if (arr[index].adress == "Null")
			{
				arr[index] = tmp;
				return;
			}
			index++;
			collis++;
		}
		if (index >= size)
		{
			index = 0;
			collis++;
			while (index < hash)
			{
				if (arr[index].adress == "Null")
				{
					arr[index] = tmp;
					return;
				}
				index++;
				collis++;
			}
		}
	}
}

void hash_table::findIndex(string adress, int size)
{
	int hash = hash_f(adress, size);
	int index = hash;
	while (arr[index].adress != adress && index < size)
	{
		index++;
	}
	if (index >= size)
	{
		index = 0;
		while (arr[index].adress != adress && index < hash)
		{
			index++;
		}
		if (index >= hash)
		{
			cout << "Not found";
		}
		else
		{
			cout << "Found on: " << index << endl << endl;
		}
	}
}

int main()
{
	srand(time(0));
	int size;
	cout << "Amount of elements: ";
	cin >> size;
	cout << endl;
	human* arr = new human[size];
	hash_table table(size);
	fill_human(arr, size);
	for (int i = 0; i < size; i++)
	{
		table.add(arr[i], size);
	}
	showTable(&table, size);
	table.findIndex("88005553535", size);
	cout << endl << endl;
	cout << "Total collisions for " << size << " men: " << collis << endl;
	delete[] arr;
	return 0;
}
